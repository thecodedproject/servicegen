package server

import (
	context "context"
	basicpb "github.com/thecodedproject/servicegen/example_basic_service/basicpb"
	internal "github.com/thecodedproject/servicegen/example_basic_service/internal"
	resources "github.com/thecodedproject/servicegen/example_basic_service/resources"
)

type GRPCServer struct {
	r resources.Resources
}

func (s *GRPCServer) Ping(
	ctx context.Context,
	req *basicpb.PingRequest,
) (*basicpb.PingResponse, error) {


	response, err := internal.Ping(
		ctx,
		s.r,
	)
	if err != nil {
		return nil, err
	}

	return &basicpb.PingResponse{
		Response: response,
	}, nil
}

func (s *GRPCServer) Echo(
	ctx context.Context,
	req *basicpb.EchoRequest,
) (*basicpb.EchoResponse, error) {


	respMessage, err := internal.Echo(
		ctx,
		s.r,
		req.ReqMessage,
	)
	if err != nil {
		return nil, err
	}

	return &basicpb.EchoResponse{
		RespMessage: respMessage,
	}, nil
}

func (s *GRPCServer) UseManyTypes(
	ctx context.Context,
	req *basicpb.UseManyTypesRequest,
) (*basicpb.UseManyTypesResponse, error) {


	one, two, three, four, five, six, err := internal.UseManyTypes(
		ctx,
		s.r,
		req.One,
		req.Two,
		req.Three,
		req.Four,
		req.Five,
		req.Six,
	)
	if err != nil {
		return nil, err
	}

	return &basicpb.UseManyTypesResponse{
		One: one,
		Two: two,
		Three: three,
		Four: four,
		Five: five,
		Six: six,
	}, nil
}

