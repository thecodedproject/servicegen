package server

import (
	context "context"
	internal "github.com/thecodedproject/servicegen/example_basic_service/internal"
	pb "github.com/thecodedproject/servicegen/example_basic_service/pb"
	resources "github.com/thecodedproject/servicegen/example_basic_service/resources"
)

type grpcServer struct {
	pb.UnimplementedBasicServer

	r resources.Resources
}

func New(r resources.Resources) *grpcServer {

	return &grpcServer{
		r: r,
	}
}

func (_s *grpcServer) Ping(
	ctx context.Context,
	req *pb.PingRequest,
) (*pb.PingResponse, error) {

	response, err := internal.Ping(
		ctx,
		_s.r,
	)
	if err != nil {
		return nil, err
	}

	return &pb.PingResponse{
		Response: response,
	}, nil
}

func (_s *grpcServer) Echo(
	ctx context.Context,
	req *pb.EchoRequest,
) (*pb.EchoResponse, error) {

	respMessage, err := internal.Echo(
		ctx,
		_s.r,
		req.ReqMessage,
	)
	if err != nil {
		return nil, err
	}

	return &pb.EchoResponse{
		RespMessage: respMessage,
	}, nil
}

func (_s *grpcServer) UseManyTypes(
	ctx context.Context,
	req *pb.UseManyTypesRequest,
) (*pb.UseManyTypesResponse, error) {

	one, two, three, four, five, six, err := internal.UseManyTypes(
		ctx,
		_s.r,
		req.One,
		req.Two,
		req.Three,
		req.Four,
		req.Five,
		req.Six,
	)
	if err != nil {
		return nil, err
	}

	return &pb.UseManyTypesResponse{
		One: one,
		Two: two,
		Three: three,
		Four: four,
		Five: five,
		Six: six,
	}, nil
}

