package server

import (
	context "context"
	internal "github.com/thecodedproject/servicegen/example_nested_msgs/internal"
	pb "github.com/thecodedproject/servicegen/example_nested_msgs/pb"
	resources "github.com/thecodedproject/servicegen/example_nested_msgs/resources"
)

type grpcServer struct {
	pb.UnimplementedNestedServer

	r resources.Resources
}

func New(r resources.Resources) *grpcServer {

	return &grpcServer{
		r: r,
	}
}

func (_s *grpcServer) LoneNest(
	ctx context.Context,
	req *pb.LoneNestRequest,
) (*pb.LoneNestResponse, error) {

	b, err := internal.LoneNest(
		ctx,
		_s.r,
		pb.MsgAFromProto(req.A),
	)
	if err != nil {
		return nil, err
	}

	return &pb.LoneNestResponse{
		B: pb.MsgBToProto(b),
	}, nil
}

func (_s *grpcServer) SeveralParams(
	ctx context.Context,
	req *pb.SeveralParamsRequest,
) (*pb.SeveralParamsResponse, error) {

	a, b, err := internal.SeveralParams(
		ctx,
		_s.r,
		req.A,
		pb.MsgAFromProto(req.B),
		pb.MsgCFromProto(req.C),
		req.D,
	)
	if err != nil {
		return nil, err
	}

	return &pb.SeveralParamsResponse{
		A: pb.MsgAToProto(a),
		B: pb.MsgBToProto(b),
	}, nil
}

func (_s *grpcServer) MultiDepth(
	ctx context.Context,
	req *pb.MultiDepthRequest,
) (*pb.MultiDepthResponse, error) {

	a, err := internal.MultiDepth(
		ctx,
		_s.r,
		pb.MsgDFromProto(req.A),
	)
	if err != nil {
		return nil, err
	}

	return &pb.MultiDepthResponse{
		A: pb.MsgEToProto(a),
	}, nil
}

