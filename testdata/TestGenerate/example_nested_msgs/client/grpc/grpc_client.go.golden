package grpc

import (
	context "context"
	errors "errors"
	flag "flag"
	example_nested_msgs "github.com/thecodedproject/servicegen/example_nested_msgs"
	pb "github.com/thecodedproject/servicegen/example_nested_msgs/pb"
	grpc "google.golang.org/grpc"
	connectivity "google.golang.org/grpc/connectivity"
	testing "testing"
	time "time"
)

var address = flag.String("nested_grpc_address", "", "host:port of nested gRPC service")

type grpcClient struct {
	rpcConn *grpc.ClientConn
	rpcClient pb.NestedClient
}

func New() (*grpcClient, error) {

	conn, err := grpc.Dial(*address, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	for {
		if conn.GetState() == connectivity.Ready {
			break
		}
		if !conn.WaitForStateChange(ctx, conn.GetState()) {
			err := errors.New("grpc timeout whilst connecting")
			return nil, err
		}
	}

	return &grpcClient{
		rpcConn: conn,
		rpcClient: pb.NewNestedClient(conn),
	}, nil
}

func NewForTesting(
	_ *testing.T,
	conn *grpc.ClientConn,
) *grpcClient {

	return &grpcClient{
		rpcConn: conn,
		rpcClient: pb.NewNestedClient(conn),
	}
}

func (_c *grpcClient) LoneNest(
	ctx context.Context,
	a example_nested_msgs.MsgA,
) (example_nested_msgs.MsgB, error) {

	res, err := _c.rpcClient.LoneNest(
		ctx,
		&pb.LoneNestRequest{
			A: pb.MsgAToProto(a),
		},
	)
	if err != nil {
		return example_nested_msgs.MsgB{}, err
	}

	return pb.MsgBFromProto(res.B), nil
}

func (_c *grpcClient) SeveralParams(
	ctx context.Context,
	a string,
	b example_nested_msgs.MsgA,
	c example_nested_msgs.MsgC,
	d int64,
) (example_nested_msgs.MsgA, example_nested_msgs.MsgB, error) {

	res, err := _c.rpcClient.SeveralParams(
		ctx,
		&pb.SeveralParamsRequest{
			A: a,
			B: pb.MsgAToProto(b),
			C: pb.MsgCToProto(c),
			D: d,
		},
	)
	if err != nil {
		return example_nested_msgs.MsgA{}, example_nested_msgs.MsgB{}, err
	}

	return pb.MsgAFromProto(res.A), pb.MsgBFromProto(res.B), nil
}

func (_c *grpcClient) MultiDepth(
	ctx context.Context,
	a example_nested_msgs.MsgD,
) (example_nested_msgs.MsgE, error) {

	res, err := _c.rpcClient.MultiDepth(
		ctx,
		&pb.MultiDepthRequest{
			A: pb.MsgDToProto(a),
		},
	)
	if err != nil {
		return example_nested_msgs.MsgE{}, err
	}

	return pb.MsgEFromProto(res.A), nil
}

